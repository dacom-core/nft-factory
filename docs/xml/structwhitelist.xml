<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="structwhitelist" kind="struct" language="C++" prot="public">
    <compoundname>whitelist</compoundname>
    <includes refid="nft_8hpp" local="no">nft.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structwhitelist_1ade663f800c6bf704ff7092c4fa11608f" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t whitelist::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <qualifiedname>whitelist::id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nft.hpp" line="334" column="16" bodyfile="nft.hpp" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwhitelist_1abf1a6fc20a6e1756bcf083e432ba64c6" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t whitelist::object_id</definition>
        <argsstring></argsstring>
        <name>object_id</name>
        <qualifiedname>whitelist::object_id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>идентификатор предложения </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nft.hpp" line="335" column="16" bodyfile="nft.hpp" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structwhitelist_1af2d04d423409683d04331c2fd85b085d" prot="public" static="no" mutable="no">
        <type>eosio::name</type>
        <definition>eosio::name whitelist::username</definition>
        <argsstring></argsstring>
        <name>username</name>
        <qualifiedname>whitelist::username</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nft.hpp" line="336" column="19" bodyfile="nft.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structwhitelist_1a007f73a3166a02b749740fd3ecd856e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t whitelist::primary_key</definition>
        <argsstring>() const</argsstring>
        <name>primary_key</name>
        <qualifiedname>whitelist::primary_key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return id - primary_key </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nft.hpp" line="338" column="16" bodyfile="nft.hpp" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="structwhitelist_1af753178ddeae72f6fc89a611868b01f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t whitelist::byobject</definition>
        <argsstring>() const</argsstring>
        <name>byobject</name>
        <qualifiedname>whitelist::byobject</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return market_id - secondary_key 2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nft.hpp" line="339" column="16" bodyfile="nft.hpp" bodystart="339" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="structwhitelist_1abfa3c9003e82e9b6a36429c2e2d5555e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t whitelist::byusername</definition>
        <argsstring>() const</argsstring>
        <name>byusername</name>
        <qualifiedname>whitelist::byusername</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return username - secondary_key 3 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nft.hpp" line="340" column="16" bodyfile="nft.hpp" bodystart="340" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="structwhitelist_1ac188226e00f9ca2eef797c833b5f0e32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint128_t</type>
        <definition>uint128_t whitelist::byobjanduser</definition>
        <argsstring>() const</argsstring>
        <name>byobjanduser</name>
        <qualifiedname>whitelist::byobjanduser</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(contract, blocked_now.symbol) - комбинированный secondary_key для получения курса по имени выходного контракта и символу </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nft.hpp" line="342" column="17" bodyfile="nft.hpp" bodystart="342" bodyend="340"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Таблица белого листа для эмиссии частей </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Contract: _me</title><para></para>
</simplesect>
<simplesect kind="par"><title>Scope: _me | _me</title><para></para>
</simplesect>
<simplesect kind="par"><title>Table: whitelist</title><para></para>
</simplesect>
Таблица хранит пользователей, которые могут осуществлять действие эмиссии частей NFT </para>
    </detaileddescription>
    <location file="nft.hpp" line="333" column="5" bodyfile="nft.hpp" bodystart="333" bodyend="345"/>
    <listofallmembers>
      <member refid="structwhitelist_1ac188226e00f9ca2eef797c833b5f0e32" prot="public" virt="non-virtual"><scope>whitelist</scope><name>byobjanduser</name></member>
      <member refid="structwhitelist_1af753178ddeae72f6fc89a611868b01f8" prot="public" virt="non-virtual"><scope>whitelist</scope><name>byobject</name></member>
      <member refid="structwhitelist_1abfa3c9003e82e9b6a36429c2e2d5555e" prot="public" virt="non-virtual"><scope>whitelist</scope><name>byusername</name></member>
      <member refid="structwhitelist_1ade663f800c6bf704ff7092c4fa11608f" prot="public" virt="non-virtual"><scope>whitelist</scope><name>id</name></member>
      <member refid="structwhitelist_1abf1a6fc20a6e1756bcf083e432ba64c6" prot="public" virt="non-virtual"><scope>whitelist</scope><name>object_id</name></member>
      <member refid="structwhitelist_1a007f73a3166a02b749740fd3ecd856e5" prot="public" virt="non-virtual"><scope>whitelist</scope><name>primary_key</name></member>
      <member refid="structwhitelist_1af2d04d423409683d04331c2fd85b085d" prot="public" virt="non-virtual"><scope>whitelist</scope><name>username</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
